import React, { Component } from 'react';
import { AppRegistry, Text, View, StyleSheet, TouchableOpacity, TouchableHighlight, Dimensions, Image } from 'react-native';
import Constants from 'expo-constants';

export default class App extends Component {
  state = {
    board: Array(9).fill(null),
    isXNext: true,
  };

  handleClick = (index) => {
    if (this.state.board[index] || this.calculateWinner()) {
      return;
    }

    const newBoard = this.state.board.slice();
    newBoard[index] = this.state.isXNext ? 'X' : 'O';
    this.setState({
      board: newBoard,
      isXNext: !this.state.isXNext,
    });
  };

    calculateWinner = () => {
    const lines = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ];

    for (let i = 0; i < lines.length; i++) {
      const [a, b, c] = lines[i];
      if (this.state.board[a] && this.state.board[a] === this.state.board[b] && this.state.board[a] === this.state.board[c]) {
        return this.state.board[a];
      }
    }

    return null;
  };

  handleReset = () => {
    this.setState({
      board: Array(9).fill(null),
      isXNext: true,
    });
  };

  renderSquare = (index) => (
    <TouchableOpacity
      style={styles.square}
      onPress={() => this.handleClick(index)}
      activeOpacity={1}
    >
      <Text style={styles.squareText}>{this.state.board[index]}</Text>
    </TouchableOpacity>
  );

  render() {
    const winner = this.calculateWinner();

    return (
      <View style={styles.container}>
        <Text style={styles.header}>{winner ? `Winner: ${winner}` : `Next Player: ${this.state.isXNext ? 'X' : 'O'}`}</Text>
        <View style={styles.board}>
          {Array(3)
            .fill(null)
            .map((_, row) => (
              <View key={row} style={styles.row}>
                {Array(3)
                  .fill(null)
                  .map((_, col) => this.renderSquare(row * 3 + col))}
              </View>
            ))}
        </View>
        <TouchableOpacity style={styles.resetButton} onPress={this.handleReset}>
          <Text style={styles.resetButtonText}>Reset Board</Text>
        </TouchableOpacity>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  header: {
    fontSize: 20,
    marginBottom: 20,
  },
  board: {
    flexDirection: 'column',
  },
  row: {
    flexDirection: 'row',
  },
  square: {
    width: 60,
    height: 60,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#999',
  },
  squareText: {
    fontSize: 20,
  },
  resetButton: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#3498db',
    borderRadius: 5,
  },
  resetButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
